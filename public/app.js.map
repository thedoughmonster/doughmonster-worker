{
  "version": 3,
  "sources": ["../src/ui/index.tsx", "../src/ui/OrdersAllDayView.tsx", "../src/ui/components/OrdersFilterBar.tsx", "../src/ui/components/OrdersGrid.tsx", "../src/ui/components/OrdersHeader.tsx", "../src/ui/components/ModifiersRail.tsx"],
  "sourcesContent": ["import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport OrdersAllDayView from \"./OrdersAllDayView\";\n\nconst container = document.getElementById(\"app\");\n\nif (container) {\n  const root = createRoot(container);\n  root.render(\n    <React.StrictMode>\n      <OrdersAllDayView />\n    </React.StrictMode>\n  );\n}\n", "import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { OrdersFilterBar } from \"./components/OrdersFilterBar\";\nimport { OrdersGrid } from \"./components/OrdersGrid\";\nimport { OrdersHeader } from \"./components/OrdersHeader\";\nimport { ModifiersRail } from \"./components/ModifiersRail\";\n\nexport const ORDERS_ENDPOINT = \"https://example.com/api/orders-detailed\";\nexport const POLL_INTERVAL_MS = 10_000;\n\ntype ToastTimestamp = string;\n\ntype NormalizedDiningOption =\n  | \"DINE_IN\"\n  | \"TAKEOUT\"\n  | \"DELIVERY\"\n  | \"CURBSIDE\"\n  | \"DRIVE_THRU\"\n  | \"CATERING\"\n  | \"UNKNOWN\";\n\ntype DiningOption = NormalizedDiningOption | string;\n\ntype FulfillmentStatus =\n  | \"READY_FOR_PICKUP\"\n  | \"IN_PREPARATION\"\n  | \"READY\"\n  | \"SENT\"\n  | \"HOLD\"\n  | \"NEW\"\n  | \"PICKED_UP\"\n  | \"DELIVERED\"\n  | \"COMPLETED\"\n  | \"CANCELLED\"\n  | null\n  | string;\n\ntype DeliveryState = \"PENDING\" | \"IN_PROGRESS\" | \"PICKED_UP\" | \"DELIVERED\" | null | string;\n\nexport type OrderStatus = \"all\" | \"open\" | \"ready\" | \"delivery\";\n\ninterface ToastModifier {\n  id?: string | null;\n  name: string;\n  groupName: string | null;\n  priceCents?: number | null;\n  quantity?: number | null;\n}\n\ninterface ToastItem {\n  lineItemId: string;\n  menuItemId: string;\n  itemName: string;\n  quantity: number;\n  fulfillmentStatus: FulfillmentStatus;\n  modifiers?: ToastModifier[] | null;\n}\n\ninterface ToastOrderData {\n  orderId: string;\n  location?: { locationId?: string | null } | null;\n  orderTime: ToastTimestamp;\n  timeDue: ToastTimestamp | null;\n  orderNumber: string;\n  checkId?: string;\n  status?: string | null;\n  fulfillmentStatus: FulfillmentStatus;\n  customerName: string | null;\n  orderType: DiningOption;\n  orderTypeNormalized?: NormalizedDiningOption | null;\n  diningOptionGuid?: string | null;\n  promisedDate?: ToastTimestamp | null;\n  estimatedFulfillmentDate?: ToastTimestamp | null;\n  deliveryState: DeliveryState;\n}\n\ninterface ToastOrder {\n  orderData: ToastOrderData;\n  items: ToastItem[];\n  totals?: unknown;\n}\n\ninterface ItemsExpandedResponse {\n  orders: ToastOrder[];\n}\n\ninterface CombinedModifierSummary {\n  key: string;\n  name: string;\n  groupName: string | null;\n  quantity: number;\n}\n\ninterface CombinedItem {\n  key: string;\n  itemName: string;\n  menuItemId: string;\n  totalQuantity: number;\n  modifiers: CombinedModifierSummary[];\n  statusSummary: string;\n}\n\nexport interface EnrichedOrder {\n  raw: ToastOrder;\n  placedAt: Date;\n  dueAt: Date | null;\n  combinedItems: CombinedItem[];\n}\n\nexport interface ModifierAggregateRow {\n  key: string;\n  name: string;\n  count: number;\n  groupName: string | null;\n}\n\nconst CLOSED_FULFILLMENT_STATUSES = new Set([\n  \"COMPLETED\",\n  \"DELIVERED\",\n  \"PICKED_UP\",\n  \"CANCELLED\",\n]);\n\nconst CLOSED_DELIVERY_STATES = new Set([\"DELIVERED\"]);\n\nconst FILTERS: { id: OrderStatus; label: string }[] = [\n  { id: \"all\", label: \"All\" },\n  { id: \"open\", label: \"Open\" },\n  { id: \"ready\", label: \"Ready\" },\n  { id: \"delivery\", label: \"Delivery\" },\n];\n\nexport function parseToast(timestamp: ToastTimestamp): Date {\n  if (!timestamp) {\n    return new Date();\n  }\n\n  const normalized = timestamp.replace(/([+-]\\d{2})(\\d{2})$/, \"$1:$2\");\n  return new Date(normalized);\n}\n\nexport function formatLocalTime(date: Date): string {\n  return new Intl.DateTimeFormat(undefined, {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n  }).format(date);\n}\n\nexport function formatDuration(ms: number): string {\n  const totalSeconds = Math.max(0, Math.floor(ms / 1000));\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = totalSeconds % 60;\n\n  const parts: string[] = [];\n  if (hours > 0) {\n    parts.push(`${hours}h`);\n  }\n  parts.push(`${minutes}m`);\n  parts.push(`${seconds}s`);\n  return parts.join(\" \");\n}\n\nexport function hashModifier(modifier: ToastModifier): string {\n  if (modifier.id) {\n    return modifier.id;\n  }\n  const name = modifier.name ?? \"\";\n  const group = modifier.groupName ?? \"\";\n  return `${name}|${group}`;\n}\n\nexport function hashItem(item: ToastItem): string {\n  const modifiers = (item.modifiers ?? [])\n    .map((modifier) => `${hashModifier(modifier)}:${modifier.quantity ?? 1}`)\n    .sort()\n    .join(\";\");\n\n  return `${item.menuItemId}|${modifiers}`;\n}\n\nfunction isOpenOrder(order: ToastOrder): boolean {\n  const fulfillmentStatus = order.orderData.fulfillmentStatus;\n  const deliveryState = order.orderData.deliveryState;\n\n  if (deliveryState && CLOSED_DELIVERY_STATES.has(deliveryState)) {\n    return false;\n  }\n\n  if (!fulfillmentStatus) {\n    return true;\n  }\n\n  return !CLOSED_FULFILLMENT_STATUSES.has(fulfillmentStatus);\n}\n\nfunction matchesFilter(order: ToastOrder, filter: OrderStatus): boolean {\n  switch (filter) {\n    case \"all\":\n      return true;\n    case \"open\":\n      return isOpenOrder(order);\n    case \"ready\":\n      return order.orderData.fulfillmentStatus === \"READY_FOR_PICKUP\";\n    case \"delivery\":\n      return (\n        (order.orderData.orderTypeNormalized ?? order.orderData.orderType) === \"DELIVERY\" ||\n        order.orderData.deliveryState === \"IN_PROGRESS\" ||\n        order.orderData.deliveryState === \"PICKED_UP\"\n      );\n    default:\n      return true;\n  }\n}\n\nfunction combineOrderItems(items: ToastItem[]): CombinedItem[] {\n  const map = new Map<string, CombinedItem>();\n\n  items.forEach((item) => {\n    const key = hashItem(item);\n    const itemQuantity = item.quantity ?? 1;\n    const modifiers = item.modifiers ?? [];\n\n    const existing = map.get(key);\n    if (existing) {\n      existing.totalQuantity += itemQuantity;\n\n      const modifierMap = new Map(existing.modifiers.map((m) => [m.key, m] as const));\n      modifiers.forEach((modifier) => {\n        const modifierKey = hashModifier(modifier);\n        const modifierQuantity = (modifier.quantity ?? 1) * itemQuantity;\n        const current = modifierMap.get(modifierKey);\n        if (current) {\n          current.quantity += modifierQuantity;\n        } else {\n          modifierMap.set(modifierKey, {\n            key: modifierKey,\n            name: modifier.name,\n            groupName: modifier.groupName,\n            quantity: modifierQuantity,\n          });\n        }\n      });\n      existing.modifiers = Array.from(modifierMap.values()).sort((a, b) =>\n        a.name.localeCompare(b.name, undefined, { sensitivity: \"base\" })\n      );\n\n      existing.statusSummary = summarizeItemStatuses(existing.statusSummary, item.fulfillmentStatus);\n    } else {\n      const modifierSummaries: CombinedModifierSummary[] = [];\n      const modifierMap = new Map<string, CombinedModifierSummary>();\n      modifiers.forEach((modifier) => {\n        const modifierKey = hashModifier(modifier);\n        const modifierQuantity = (modifier.quantity ?? 1) * itemQuantity;\n        modifierMap.set(modifierKey, {\n          key: modifierKey,\n          name: modifier.name,\n          groupName: modifier.groupName,\n          quantity: modifierQuantity,\n        });\n      });\n      modifierMap.forEach((value) => modifierSummaries.push(value));\n      modifierSummaries.sort((a, b) => a.name.localeCompare(b.name, undefined, { sensitivity: \"base\" }));\n\n      map.set(key, {\n        key,\n        itemName: item.itemName,\n        menuItemId: item.menuItemId,\n        totalQuantity: itemQuantity,\n        modifiers: modifierSummaries,\n        statusSummary: summarizeItemStatuses(undefined, item.fulfillmentStatus),\n      });\n    }\n  });\n\n  return Array.from(map.values());\n}\n\nfunction summarizeItemStatuses(\n  currentSummary: string | undefined,\n  nextStatus: FulfillmentStatus\n): string {\n  const normalizedStatus = nextStatus ?? \"Unknown\";\n\n  if (!currentSummary || currentSummary === normalizedStatus) {\n    return normalizedStatus;\n  }\n\n  if (currentSummary.includes(\"Mixed\")) {\n    return currentSummary;\n  }\n\n  if (currentSummary !== normalizedStatus) {\n    return \"Mixed\";\n  }\n\n  return currentSummary;\n}\n\nfunction aggregateModifiers(orders: ToastOrder[]): ModifierAggregateRow[] {\n  const counts = new Map<string, ModifierAggregateRow>();\n\n  orders.forEach((order) => {\n    order.items.forEach((item) => {\n      (item.modifiers ?? []).forEach((modifier) => {\n        const key = hashModifier(modifier);\n        const quantity = (modifier.quantity ?? 1) * (item.quantity ?? 1);\n        const existing = counts.get(key);\n        if (existing) {\n          existing.count += quantity;\n        } else {\n          counts.set(key, {\n            key,\n            name: modifier.name,\n            groupName: modifier.groupName,\n            count: quantity,\n          });\n        }\n      });\n    });\n  });\n\n  return Array.from(counts.values())\n    .sort((a, b) => {\n      if (b.count !== a.count) {\n        return b.count - a.count;\n      }\n      return a.name.localeCompare(b.name, undefined, { sensitivity: \"base\" });\n    })\n    .slice(0, 50);\n}\n\nexport function classNames(...values: Array<string | undefined | null | false>): string {\n  return values.filter(Boolean).join(\" \");\n}\n\nexport function getUrgencyClasses(dueAt: Date | null, now: Date): string {\n  if (!dueAt) {\n    return \"border-slate-800\";\n  }\n\n  const diff = dueAt.getTime() - now.getTime();\n\n  if (diff < 0) {\n    return \"border-red-500\";\n  }\n\n  if (diff <= 5 * 60 * 1000) {\n    return \"border-amber-400\";\n  }\n\n  return \"border-slate-800\";\n}\n\nexport function getStatusChipClasses(status: FulfillmentStatus | string | undefined): string {\n  switch (status) {\n    case \"READY\":\n    case \"READY_FOR_PICKUP\":\n      return \"bg-emerald-500/20 text-emerald-300 border border-emerald-500/40\";\n    case \"IN_PREPARATION\":\n    case \"SENT\":\n      return \"bg-amber-500/20 text-amber-300 border border-amber-500/40\";\n    case \"HOLD\":\n      return \"bg-amber-700/30 text-amber-200 border border-amber-500/40\";\n    case \"NEW\":\n      return \"bg-slate-700 text-slate-200 border border-slate-500\";\n    case \"Mixed\":\n      return \"bg-fuchsia-700/30 text-fuchsia-200 border border-fuchsia-400/50\";\n    default:\n      return \"bg-slate-700 text-slate-200 border border-slate-600\";\n  }\n}\n\nexport const OrdersAllDayView: React.FC = () => {\n  const [orders, setOrders] = useState<ToastOrder[]>([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const [initialLoadComplete, setInitialLoadComplete] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [filter, setFilter] = useState<OrderStatus>(\"open\");\n  const [now, setNow] = useState<Date>(() => new Date());\n  const [isRailOpen, setIsRailOpen] = useState(false);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setNow(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const fetchOrders = useCallback(async () => {\n    setIsFetching(true);\n    try {\n      const response = await fetch(ORDERS_ENDPOINT, {\n        cache: \"no-store\",\n      });\n\n      if (!response.ok) {\n        throw new Error(`Request failed: ${response.status}`);\n      }\n\n      const payload = (await response.json()) as ItemsExpandedResponse;\n      setOrders(Array.isArray(payload.orders) ? payload.orders : []);\n      setLastUpdated(new Date());\n      setError(null);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : \"Unknown error\";\n      setError(message);\n    } finally {\n      setIsFetching(false);\n      setInitialLoadComplete(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchOrders();\n    const interval = setInterval(fetchOrders, POLL_INTERVAL_MS);\n    return () => clearInterval(interval);\n  }, [fetchOrders]);\n\n  const sortedOrders = useMemo(() => {\n    return [...orders].sort((a, b) => {\n      const dueA = a.orderData.timeDue ? parseToast(a.orderData.timeDue) : null;\n      const dueB = b.orderData.timeDue ? parseToast(b.orderData.timeDue) : null;\n\n      if (dueA && dueB) {\n        const diff = dueA.getTime() - dueB.getTime();\n        if (diff !== 0) {\n          return diff;\n        }\n      } else if (dueA && !dueB) {\n        return -1;\n      } else if (!dueA && dueB) {\n        return 1;\n      }\n\n      const placedA = parseToast(a.orderData.orderTime).getTime();\n      const placedB = parseToast(b.orderData.orderTime).getTime();\n      if (placedA !== placedB) {\n        return placedA - placedB;\n      }\n\n      const orderNumberA = Number.parseInt(a.orderData.orderNumber, 10);\n      const orderNumberB = Number.parseInt(b.orderData.orderNumber, 10);\n\n      if (!Number.isNaN(orderNumberA) && !Number.isNaN(orderNumberB)) {\n        return orderNumberA - orderNumberB;\n      }\n\n      return a.orderData.orderNumber.localeCompare(b.orderData.orderNumber);\n    });\n  }, [orders]);\n\n  const visibleOrders = useMemo(\n    () => sortedOrders.filter((order) => matchesFilter(order, filter)),\n    [sortedOrders, filter]\n  );\n\n  const openOrderCount = useMemo(\n    () => sortedOrders.filter((order) => isOpenOrder(order)).length,\n    [sortedOrders]\n  );\n\n  const modifierAggregations = useMemo(\n    () => aggregateModifiers(visibleOrders),\n    [visibleOrders]\n  );\n\n  const enrichedOrders = useMemo<EnrichedOrder[]>(\n    () =>\n      visibleOrders.map((order) => ({\n        raw: order,\n        placedAt: parseToast(order.orderData.orderTime),\n        dueAt: order.orderData.timeDue ? parseToast(order.orderData.timeDue) : null,\n        combinedItems: combineOrderItems(order.items),\n      })),\n    [visibleOrders]\n  );\n\n  const showLoading = !initialLoadComplete;\n  const showEmptyState = initialLoadComplete && !visibleOrders.length && !isFetching && !error;\n\n  const handleToggleRail = useCallback(() => {\n    setIsRailOpen((prev) => !prev);\n  }, []);\n\n  const currentTimeLabel = useMemo(() => formatLocalTime(now), [now]);\n  const lastUpdatedLabel = useMemo(\n    () => (lastUpdated ? formatLocalTime(lastUpdated) : null),\n    [lastUpdated]\n  );\n\n  const filterStatusMessage = useMemo(() => {\n    if (isFetching) {\n      return \"Refreshing\u2026\";\n    }\n    if (lastUpdated) {\n      return `Last updated ${formatLocalTime(lastUpdated)}`;\n    }\n    return \"Awaiting data\";\n  }, [isFetching, lastUpdated]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-950 text-slate-100\">\n      <OrdersHeader\n        currentTimeLabel={currentTimeLabel}\n        error={error}\n        isRailOpen={isRailOpen}\n        lastUpdatedLabel={lastUpdatedLabel}\n        onToggleRail={handleToggleRail}\n        openOrderCount={openOrderCount}\n      />\n\n      <ModifiersRail\n        isOpen={isRailOpen}\n        modifierAggregations={modifierAggregations}\n        showLoading={showLoading}\n      />\n\n      <main\n        className={classNames(\n          \"relative z-10 min-h-screen pt-20 transition-all\",\n          \"px-4 pb-10 sm:px-6 lg:px-10\",\n          \"md:pl-80\"\n        )}\n      >\n        <OrdersFilterBar\n          activeFilter={filter}\n          filters={FILTERS}\n          onFilterChange={setFilter}\n          statusMessage={filterStatusMessage}\n        />\n\n        <OrdersGrid\n          enrichedOrders={enrichedOrders}\n          error={error}\n          now={now}\n          onRetry={fetchOrders}\n          showEmptyState={showEmptyState}\n          showLoading={showLoading}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport function formatDiningOption(option: DiningOption): string {\n  if (!option) {\n    return \"Unknown\";\n  }\n  if (/[a-z]/.test(option)) {\n    return option;\n  }\n  return option\n    .split(\"_\")\n    .map((segment) => segment.charAt(0) + segment.slice(1).toLowerCase())\n    .join(\" \");\n}\n\nexport default OrdersAllDayView;\n", "import React, { memo } from \"react\";\nimport type { OrderStatus } from \"../OrdersAllDayView\";\nimport { classNames } from \"../OrdersAllDayView\";\n\ninterface FilterOption {\n  id: OrderStatus;\n  label: string;\n}\n\ninterface OrdersFilterBarProps {\n  filters: FilterOption[];\n  activeFilter: OrderStatus;\n  onFilterChange: (status: OrderStatus) => void;\n  statusMessage: string;\n}\n\nconst OrdersFilterBarComponent: React.FC<OrdersFilterBarProps> = ({\n  filters,\n  activeFilter,\n  onFilterChange,\n  statusMessage,\n}) => {\n  return (\n    <div className=\"mb-6 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\n      <div className=\"flex items-center gap-2\">\n        {filters.map((option) => (\n          <button\n            key={option.id}\n            type=\"button\"\n            onClick={() => onFilterChange(option.id)}\n            className={classNames(\n              \"rounded-full border px-4 py-1 text-sm font-medium transition focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500\",\n              activeFilter === option.id\n                ? \"border-emerald-500 bg-emerald-500/20 text-emerald-200\"\n                : \"border-slate-700 bg-slate-900 text-slate-300 hover:border-emerald-500 hover:text-emerald-300\"\n            )}\n          >\n            {option.label}\n          </button>\n        ))}\n      </div>\n      <div className=\"text-xs text-slate-500\">{statusMessage}</div>\n    </div>\n  );\n};\n\nexport const OrdersFilterBar = memo(OrdersFilterBarComponent);\n\nOrdersFilterBar.displayName = \"OrdersFilterBar\";\n", "import React, { memo } from \"react\";\nimport type { EnrichedOrder } from \"../OrdersAllDayView\";\nimport {\n  classNames,\n  formatDiningOption,\n  formatDuration,\n  formatLocalTime,\n  getStatusChipClasses,\n  getUrgencyClasses,\n} from \"../OrdersAllDayView\";\n\ninterface OrdersGridProps {\n  showLoading: boolean;\n  showEmptyState: boolean;\n  error: string | null;\n  enrichedOrders: EnrichedOrder[];\n  now: Date;\n  onRetry: () => void;\n}\n\nconst GridSkeleton: React.FC = () => {\n  return (\n    <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3\">\n      {Array.from({ length: 6 }).map((_, index) => (\n        <div\n          key={index}\n          className=\"h-56 animate-pulse rounded-2xl border border-slate-800 bg-slate-900/60\"\n        >\n          <div className=\"h-16 border-b border-slate-800 bg-slate-900/80\" />\n          <div className=\"space-y-3 p-4\">\n            <div className=\"h-4 rounded bg-slate-800\" />\n            <div className=\"h-4 w-1/2 rounded bg-slate-800\" />\n            <div className=\"h-3 w-2/3 rounded bg-slate-800\" />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst OrderCard: React.FC<{ order: EnrichedOrder; now: Date }> = ({ order, now }) => {\n  const { raw, placedAt, dueAt, combinedItems } = order;\n  const { orderData } = raw;\n\n  const customerName = orderData.customerName?.trim() || \"Guest\";\n  const orderNumber = orderData.orderNumber ? `#${orderData.orderNumber}` : \"\";\n  const elapsed = now.getTime() - placedAt.getTime();\n  const urgencyClasses = getUrgencyClasses(dueAt, now);\n\n  const diningLabel = formatDiningOption(orderData.orderType ?? orderData.orderTypeNormalized ?? \"UNKNOWN\");\n\n  return (\n    <article\n      className={classNames(\n        \"flex h-full flex-col overflow-hidden rounded-2xl border bg-slate-900/70 shadow-xl\",\n        urgencyClasses,\n        \"border\"\n      )}\n    >\n      <div className=\"border-b border-slate-800 bg-slate-900/90 px-4 py-3\">\n        <div className=\"flex flex-wrap items-center justify-between gap-3\">\n          <div>\n            <div className=\"flex flex-wrap items-center gap-2 text-sm text-slate-300\">\n              <span className=\"text-base font-semibold text-white\">{customerName}</span>\n              {orderNumber && (\n                <span className=\"rounded-full bg-slate-800 px-2 py-0.5 text-xs font-semibold text-slate-200\">\n                  {orderNumber}\n                </span>\n              )}\n              <span className=\"rounded-full border border-slate-700 bg-slate-800 px-2 py-0.5 text-xs font-semibold uppercase tracking-wide text-slate-200\">\n                {diningLabel}\n              </span>\n              {orderData.fulfillmentStatus && (\n                <span\n                  className={classNames(\n                    \"rounded-full px-2 py-0.5 text-xs font-semibold uppercase tracking-wide\",\n                    getStatusChipClasses(orderData.fulfillmentStatus)\n                  )}\n                >\n                  {orderData.fulfillmentStatus.replace(/_/g, \" \")}\n                </span>\n              )}\n            </div>\n            <div className=\"mt-2 flex flex-wrap items-center gap-3 text-xs text-slate-400\">\n              <span>Placed {formatLocalTime(placedAt)}</span>\n              {dueAt && <span>Due {formatLocalTime(dueAt)}</span>}\n              <span className=\"font-mono text-emerald-300\">\u23F1 {formatDuration(elapsed)} ago</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 space-y-4 px-4 py-4\">\n        {combinedItems.map((item) => (\n          <div\n            key={item.key}\n            className=\"rounded-xl border border-slate-800 bg-slate-900/60 px-4 py-3 shadow-sm\"\n          >\n            <div className=\"flex flex-wrap items-center justify-between gap-3\">\n              <div className=\"text-sm font-medium text-white\">{item.itemName}</div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"rounded-full bg-emerald-400/20 px-2 py-0.5 text-xs font-semibold text-emerald-200\">\n                  \u00D7{item.totalQuantity}\n                </span>\n                <span\n                  className={classNames(\n                    \"rounded-full px-2 py-0.5 text-xs font-semibold uppercase tracking-wide\",\n                    getStatusChipClasses(item.statusSummary)\n                  )}\n                >\n                  {item.statusSummary.replace(/_/g, \" \")}\n                </span>\n              </div>\n            </div>\n            {item.modifiers.length > 0 && (\n              <ul className=\"mt-3 space-y-2\">\n                {item.modifiers.map((modifier) => (\n                  <li\n                    key={modifier.key}\n                    className=\"flex items-center justify-between rounded-lg border border-slate-800 bg-slate-900/80 px-3 py-2\"\n                  >\n                    <div className=\"text-xs font-medium text-slate-200\">\n                      {modifier.name}\n                      {modifier.groupName && (\n                        <span className=\"ml-2 text-[10px] uppercase tracking-wide text-slate-500\">\n                          {modifier.groupName}\n                        </span>\n                      )}\n                    </div>\n                    <span className=\"rounded-full bg-slate-200 px-2 py-0.5 text-[10px] font-bold uppercase tracking-wide text-slate-900\">\n                      \u00D7{modifier.quantity}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        ))}\n      </div>\n    </article>\n  );\n};\n\nconst OrdersGridComponent: React.FC<OrdersGridProps> = ({\n  showLoading,\n  showEmptyState,\n  error,\n  enrichedOrders,\n  now,\n  onRetry,\n}) => {\n  return (\n    <>\n      {error && (\n        <div className=\"mb-4 flex items-center justify-between rounded-lg border border-red-500/40 bg-red-500/10 px-4 py-3 text-sm text-red-200\">\n          <span>{error}</span>\n          <button\n            type=\"button\"\n            onClick={onRetry}\n            className=\"rounded-full border border-red-400 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-red-100 transition hover:border-red-200 hover:text-red-50 focus:outline-none focus-visible:ring-2 focus-visible:ring-red-400\"\n          >\n            Retry\n          </button>\n        </div>\n      )}\n\n      {showLoading ? (\n        <GridSkeleton />\n      ) : showEmptyState ? (\n        <div className=\"mt-24 flex flex-col items-center justify-center gap-3 text-center\">\n          <div className=\"rounded-full border border-slate-800 bg-slate-900 p-6 text-4xl\">\uD83C\uDF69</div>\n          <h3 className=\"text-xl font-semibold text-white\">No orders to display</h3>\n          <p className=\"max-w-sm text-sm text-slate-400\">\n            Adjust the filters or check back shortly for new activity.\n          </p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3\">\n          {enrichedOrders.map((order) => (\n            <OrderCard key={order.raw.orderData.orderId} order={order} now={now} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const OrdersGrid = memo(OrdersGridComponent);\n\nOrdersGrid.displayName = \"OrdersGrid\";\n", "import React, { memo } from \"react\";\n\ninterface OrdersHeaderProps {\n  currentTimeLabel: string;\n  openOrderCount: number;\n  lastUpdatedLabel: string | null;\n  error: string | null;\n  isRailOpen: boolean;\n  onToggleRail: () => void;\n}\n\nconst SettingsIcon: React.FC<{ className?: string }> = ({ className }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth={1.5}\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <path d=\"M12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z\" />\n    <path d=\"M19.5 12a7.5 7.5 0 0 0-.08-1.08l2.12-1.65-2-3.46-2.58 1a7.52 7.52 0 0 0-1.87-1.08l-.39-2.74h-4l-.39 2.74a7.52 7.52 0 0 0-1.87-1.08l-2.58-1-2 3.46 2.12 1.65A7.5 7.5 0 0 0 4.5 12c0 .36.03.72.08 1.08l-2.12 1.65 2 3.46 2.58-1a7.52 7.52 0 0 0 1.87-1.08l.39 2.74h4l.39-2.74a7.52 7.52 0 0 0 1.87-1.08l2.58 1 2-3.46-2.12-1.65c.05-.36.08-.72.08-1.08Z\" />\n  </svg>\n);\n\nconst RailToggleIcon: React.FC<{ open: boolean; className?: string }> = ({ open, className }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth={1.5}\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    {open ? <path d=\"m6 18 6-6-6-6m12 12-6-6 6-6\" /> : <path d=\"m9 6 6 6-6 6\" />}\n  </svg>\n);\n\nconst OrdersHeaderComponent: React.FC<OrdersHeaderProps> = ({\n  currentTimeLabel,\n  openOrderCount,\n  lastUpdatedLabel,\n  error,\n  isRailOpen,\n  onToggleRail,\n}) => {\n  return (\n    <header className=\"fixed inset-x-0 top-0 z-30 border-b border-slate-800 bg-slate-950/90 backdrop-blur\">\n      <div className=\"mx-auto flex h-16 max-w-7xl items-center gap-4 px-4\">\n        <div className=\"flex items-center gap-3\">\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-full border border-slate-700 bg-slate-900 p-2 text-slate-300 transition hover:text-white focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500 md:hidden\"\n            onClick={onToggleRail}\n            aria-label={isRailOpen ? \"Hide modifiers\" : \"Show modifiers\"}\n          >\n            <RailToggleIcon open={isRailOpen} className=\"h-5 w-5\" />\n          </button>\n          <div className=\"text-lg font-semibold text-white\">Orders \u2013 All Day View</div>\n        </div>\n\n        <div className=\"flex flex-1 items-center gap-4 text-sm text-slate-300\">\n          <span className=\"hidden text-slate-400 sm:inline\">Local time</span>\n          <span className=\"font-mono text-white\">{currentTimeLabel}</span>\n          <span className=\"hidden text-slate-500 md:inline\">|</span>\n          <span className=\"font-medium text-emerald-300\">\n            Open Orders: <span className=\"font-semibold text-white\">{openOrderCount}</span>\n          </span>\n          {lastUpdatedLabel && (\n            <span className=\"hidden text-xs text-slate-400 sm:inline\">{lastUpdatedLabel}</span>\n          )}\n          {error && (\n            <span className=\"rounded-full bg-red-500/20 px-2 py-1 text-xs text-red-300\">{error}</span>\n          )}\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"relative inline-flex h-10 w-10 items-center justify-center rounded-full border border-slate-700 bg-slate-900 text-slate-200 transition hover:border-emerald-500 hover:text-emerald-300 focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500\"\n          onClick={() => console.info(\"Settings clicked\")}\n          aria-label=\"Settings\"\n        >\n          <SettingsIcon className=\"h-5 w-5\" />\n        </button>\n      </div>\n    </header>\n  );\n};\n\nexport const OrdersHeader = memo(OrdersHeaderComponent);\n\nOrdersHeader.displayName = \"OrdersHeader\";\n", "import React, { memo } from \"react\";\nimport type { ModifierAggregateRow } from \"../OrdersAllDayView\";\nimport { classNames } from \"../OrdersAllDayView\";\n\ninterface ModifiersRailProps {\n  modifierAggregations: ModifierAggregateRow[];\n  showLoading: boolean;\n  isOpen: boolean;\n}\n\nconst RailSkeleton: React.FC = () => {\n  return (\n    <ul className=\"space-y-3\">\n      {Array.from({ length: 6 }).map((_, index) => (\n        <li\n          key={index}\n          className=\"flex items-center justify-between rounded-lg border border-slate-800 bg-slate-900/60 px-3 py-3\"\n        >\n          <div className=\"h-4 w-24 animate-pulse rounded bg-slate-800\" />\n          <div className=\"h-8 w-8 animate-pulse rounded-full bg-slate-800\" />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst ModifiersRailComponent: React.FC<ModifiersRailProps> = ({\n  modifierAggregations,\n  showLoading,\n  isOpen,\n}) => {\n  return (\n    <aside\n      className={classNames(\n        \"fixed bottom-0 left-0 top-16 z-20 w-72 border-r border-slate-800 bg-slate-950/95 backdrop-blur transition-transform duration-200 ease-out\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full\",\n        \"md:translate-x-0\"\n      )}\n    >\n      <div className=\"flex h-full flex-col\">\n        <div className=\"border-b border-slate-800 px-4 py-3\">\n          <h2 className=\"text-sm font-semibold uppercase tracking-wide text-slate-400\">Modifiers</h2>\n          <p className=\"text-xs text-slate-500\">Aggregated across visible orders</p>\n        </div>\n        <div className=\"flex-1 overflow-y-auto px-3 py-4\">\n          {showLoading ? (\n            <RailSkeleton />\n          ) : modifierAggregations.length ? (\n            <ul className=\"space-y-2\">\n              {modifierAggregations.map((modifier) => (\n                <li\n                  key={modifier.key}\n                  className=\"flex items-center justify-between rounded-lg border border-slate-800 bg-slate-900/70 px-3 py-2 shadow-sm\"\n                >\n                  <div>\n                    <p className=\"text-sm font-medium text-white\">{modifier.name}</p>\n                    {modifier.groupName && <p className=\"text-xs text-slate-500\">{modifier.groupName}</p>}\n                  </div>\n                  <span className=\"flex h-8 w-8 items-center justify-center rounded-full bg-emerald-400 text-sm font-semibold text-slate-900 shadow\">\n                    {modifier.count}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div className=\"rounded-lg border border-dashed border-slate-800 bg-slate-900/60 p-4 text-center text-xs text-slate-500\">\n              No modifiers in view\n            </div>\n          )}\n        </div>\n      </div>\n    </aside>\n  );\n};\n\nexport const ModifiersRail = memo(ModifiersRailComponent);\n\nModifiersRail.displayName = \"ModifiersRail\";\n"],
  "mappings": ";AAAA,OAAOA,YAAW;AAClB,SAAS,kBAAkB;;;ACD3B,SAAgB,aAAa,WAAW,SAAS,gBAAgB;;;ACAjE,SAAgB,YAAY;AAuBxB,SAGM,KAHN;AAPJ,IAAM,2BAA2D,CAAC;AAAA,EAChE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,SACE,qBAAC,SAAI,WAAU,2EACb;AAAA,wBAAC,SAAI,WAAU,2BACZ,kBAAQ,IAAI,CAAC,WACZ;AAAA,MAAC;AAAA;AAAA,QAEC,MAAK;AAAA,QACL,SAAS,MAAM,eAAe,OAAO,EAAE;AAAA,QACvC,WAAW;AAAA,UACT;AAAA,UACA,iBAAiB,OAAO,KACpB,0DACA;AAAA,QACN;AAAA,QAEC,iBAAO;AAAA;AAAA,MAVH,OAAO;AAAA,IAWd,CACD,GACH;AAAA,IACA,oBAAC,SAAI,WAAU,0BAA0B,yBAAc;AAAA,KACzD;AAEJ;AAEO,IAAM,kBAAkB,KAAK,wBAAwB;AAE5D,gBAAgB,cAAc;;;AChD9B,SAAgB,QAAAC,aAAY;AA4BlB,SA4HN,UA5HM,OAAAC,MACA,QAAAC,aADA;AARV,IAAM,eAAyB,MAAM;AACnC,SACE,gBAAAD,KAAC,SAAI,WAAU,wDACZ,gBAAM,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,UACjC,gBAAAC;AAAA,IAAC;AAAA;AAAA,MAEC,WAAU;AAAA,MAEV;AAAA,wBAAAD,KAAC,SAAI,WAAU,kDAAiD;AAAA,QAChE,gBAAAC,MAAC,SAAI,WAAU,iBACb;AAAA,0BAAAD,KAAC,SAAI,WAAU,4BAA2B;AAAA,UAC1C,gBAAAA,KAAC,SAAI,WAAU,kCAAiC;AAAA,UAChD,gBAAAA,KAAC,SAAI,WAAU,kCAAiC;AAAA,WAClD;AAAA;AAAA;AAAA,IARK;AAAA,EASP,CACD,GACH;AAEJ;AAEA,IAAM,YAA2D,CAAC,EAAE,OAAO,IAAI,MAAM;AACnF,QAAM,EAAE,KAAK,UAAU,OAAO,cAAc,IAAI;AAChD,QAAM,EAAE,UAAU,IAAI;AAEtB,QAAM,eAAe,UAAU,cAAc,KAAK,KAAK;AACvD,QAAM,cAAc,UAAU,cAAc,IAAI,UAAU,WAAW,KAAK;AAC1E,QAAM,UAAU,IAAI,QAAQ,IAAI,SAAS,QAAQ;AACjD,QAAM,iBAAiB,kBAAkB,OAAO,GAAG;AAEnD,QAAM,cAAc,mBAAmB,UAAU,aAAa,UAAU,uBAAuB,SAAS;AAExG,SACE,gBAAAC;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MAEA;AAAA,wBAAAD,KAAC,SAAI,WAAU,uDACb,0BAAAA,KAAC,SAAI,WAAU,qDACb,0BAAAC,MAAC,SACC;AAAA,0BAAAA,MAAC,SAAI,WAAU,4DACb;AAAA,4BAAAD,KAAC,UAAK,WAAU,sCAAsC,wBAAa;AAAA,YAClE,eACC,gBAAAA,KAAC,UAAK,WAAU,8EACb,uBACH;AAAA,YAEF,gBAAAA,KAAC,UAAK,WAAU,8HACb,uBACH;AAAA,YACC,UAAU,qBACT,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,WAAW;AAAA,kBACT;AAAA,kBACA,qBAAqB,UAAU,iBAAiB;AAAA,gBAClD;AAAA,gBAEC,oBAAU,kBAAkB,QAAQ,MAAM,GAAG;AAAA;AAAA,YAChD;AAAA,aAEJ;AAAA,UACA,gBAAAC,MAAC,SAAI,WAAU,iEACb;AAAA,4BAAAA,MAAC,UAAK;AAAA;AAAA,cAAQ,gBAAgB,QAAQ;AAAA,eAAE;AAAA,YACvC,SAAS,gBAAAA,MAAC,UAAK;AAAA;AAAA,cAAK,gBAAgB,KAAK;AAAA,eAAE;AAAA,YAC5C,gBAAAA,MAAC,UAAK,WAAU,8BAA6B;AAAA;AAAA,cAAG,eAAe,OAAO;AAAA,cAAE;AAAA,eAAI;AAAA,aAC9E;AAAA,WACF,GACF,GACF;AAAA,QAEA,gBAAAD,KAAC,SAAI,WAAU,8BACZ,wBAAc,IAAI,CAAC,SAClB,gBAAAC;AAAA,UAAC;AAAA;AAAA,YAEC,WAAU;AAAA,YAEV;AAAA,8BAAAA,MAAC,SAAI,WAAU,qDACb;AAAA,gCAAAD,KAAC,SAAI,WAAU,kCAAkC,eAAK,UAAS;AAAA,gBAC/D,gBAAAC,MAAC,SAAI,WAAU,2BACb;AAAA,kCAAAA,MAAC,UAAK,WAAU,qFAAoF;AAAA;AAAA,oBAChG,KAAK;AAAA,qBACT;AAAA,kBACA,gBAAAD;AAAA,oBAAC;AAAA;AAAA,sBACC,WAAW;AAAA,wBACT;AAAA,wBACA,qBAAqB,KAAK,aAAa;AAAA,sBACzC;AAAA,sBAEC,eAAK,cAAc,QAAQ,MAAM,GAAG;AAAA;AAAA,kBACvC;AAAA,mBACF;AAAA,iBACF;AAAA,cACC,KAAK,UAAU,SAAS,KACvB,gBAAAA,KAAC,QAAG,WAAU,kBACX,eAAK,UAAU,IAAI,CAAC,aACnB,gBAAAC;AAAA,gBAAC;AAAA;AAAA,kBAEC,WAAU;AAAA,kBAEV;AAAA,oCAAAA,MAAC,SAAI,WAAU,sCACZ;AAAA,+BAAS;AAAA,sBACT,SAAS,aACR,gBAAAD,KAAC,UAAK,WAAU,2DACb,mBAAS,WACZ;AAAA,uBAEJ;AAAA,oBACA,gBAAAC,MAAC,UAAK,WAAU,sGAAqG;AAAA;AAAA,sBACjH,SAAS;AAAA,uBACb;AAAA;AAAA;AAAA,gBAbK,SAAS;AAAA,cAchB,CACD,GACH;AAAA;AAAA;AAAA,UAvCG,KAAK;AAAA,QAyCZ,CACD,GACH;AAAA;AAAA;AAAA,EACF;AAEJ;AAEA,IAAM,sBAAiD,CAAC;AAAA,EACtD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,SACE,gBAAAA,MAAA,YACG;AAAA,aACC,gBAAAA,MAAC,SAAI,WAAU,2HACb;AAAA,sBAAAD,KAAC,UAAM,iBAAM;AAAA,MACb,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAU;AAAA,UACX;AAAA;AAAA,MAED;AAAA,OACF;AAAA,IAGD,cACC,gBAAAA,KAAC,gBAAa,IACZ,iBACF,gBAAAC,MAAC,SAAI,WAAU,qEACb;AAAA,sBAAAD,KAAC,SAAI,WAAU,kEAAiE,uBAAE;AAAA,MAClF,gBAAAA,KAAC,QAAG,WAAU,oCAAmC,kCAAoB;AAAA,MACrE,gBAAAA,KAAC,OAAE,WAAU,mCAAkC,wEAE/C;AAAA,OACF,IAEA,gBAAAA,KAAC,SAAI,WAAU,wDACZ,yBAAe,IAAI,CAAC,UACnB,gBAAAA,KAAC,aAA4C,OAAc,OAA3C,MAAM,IAAI,UAAU,OAAiC,CACtE,GACH;AAAA,KAEJ;AAEJ;AAEO,IAAM,aAAaE,MAAK,mBAAmB;AAElD,WAAW,cAAc;;;AC7LzB,SAAgB,QAAAC,aAAY;AAY1B,SAUE,OAAAC,MAVF,QAAAC,aAAA;AADF,IAAM,eAAiD,CAAC,EAAE,UAAU,MAClE,gBAAAA;AAAA,EAAC;AAAA;AAAA,IACC,OAAM;AAAA,IACN,SAAQ;AAAA,IACR,MAAK;AAAA,IACL,QAAO;AAAA,IACP,aAAa;AAAA,IACb,eAAc;AAAA,IACd,gBAAe;AAAA,IACf;AAAA,IAEA;AAAA,sBAAAD,KAAC,UAAK,GAAE,0DAAyD;AAAA,MACjE,gBAAAA,KAAC,UAAK,GAAE,yVAAwV;AAAA;AAAA;AAClW;AAGF,IAAM,iBAAkE,CAAC,EAAE,MAAM,UAAU,MACzF,gBAAAA;AAAA,EAAC;AAAA;AAAA,IACC,OAAM;AAAA,IACN,SAAQ;AAAA,IACR,MAAK;AAAA,IACL,QAAO;AAAA,IACP,aAAa;AAAA,IACb,eAAc;AAAA,IACd,gBAAe;AAAA,IACf;AAAA,IAEC,iBAAO,gBAAAA,KAAC,UAAK,GAAE,+BAA8B,IAAK,gBAAAA,KAAC,UAAK,GAAE,gBAAe;AAAA;AAC5E;AAGF,IAAM,wBAAqD,CAAC;AAAA,EAC1D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,SACE,gBAAAA,KAAC,YAAO,WAAU,sFAChB,0BAAAC,MAAC,SAAI,WAAU,uDACb;AAAA,oBAAAA,MAAC,SAAI,WAAU,2BACb;AAAA,sBAAAD;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,WAAU;AAAA,UACV,SAAS;AAAA,UACT,cAAY,aAAa,mBAAmB;AAAA,UAE5C,0BAAAA,KAAC,kBAAe,MAAM,YAAY,WAAU,WAAU;AAAA;AAAA,MACxD;AAAA,MACA,gBAAAA,KAAC,SAAI,WAAU,oCAAmC,wCAAqB;AAAA,OACzE;AAAA,IAEA,gBAAAC,MAAC,SAAI,WAAU,yDACb;AAAA,sBAAAD,KAAC,UAAK,WAAU,mCAAkC,wBAAU;AAAA,MAC5D,gBAAAA,KAAC,UAAK,WAAU,wBAAwB,4BAAiB;AAAA,MACzD,gBAAAA,KAAC,UAAK,WAAU,mCAAkC,eAAC;AAAA,MACnD,gBAAAC,MAAC,UAAK,WAAU,gCAA+B;AAAA;AAAA,QAChC,gBAAAD,KAAC,UAAK,WAAU,4BAA4B,0BAAe;AAAA,SAC1E;AAAA,MACC,oBACC,gBAAAA,KAAC,UAAK,WAAU,2CAA2C,4BAAiB;AAAA,MAE7E,SACC,gBAAAA,KAAC,UAAK,WAAU,6DAA6D,iBAAM;AAAA,OAEvF;AAAA,IAEA,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,MAAK;AAAA,QACL,WAAU;AAAA,QACV,SAAS,MAAM,QAAQ,KAAK,kBAAkB;AAAA,QAC9C,cAAW;AAAA,QAEX,0BAAAA,KAAC,gBAAa,WAAU,WAAU;AAAA;AAAA,IACpC;AAAA,KACF,GACF;AAEJ;AAEO,IAAM,eAAeD,MAAK,qBAAqB;AAEtD,aAAa,cAAc;;;AC/F3B,SAAgB,QAAAG,aAAY;AAcpB,SAIE,OAAAC,MAJF,QAAAC,aAAA;AAJR,IAAM,eAAyB,MAAM;AACnC,SACE,gBAAAD,KAAC,QAAG,WAAU,aACX,gBAAM,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,UACjC,gBAAAC;AAAA,IAAC;AAAA;AAAA,MAEC,WAAU;AAAA,MAEV;AAAA,wBAAAD,KAAC,SAAI,WAAU,+CAA8C;AAAA,QAC7D,gBAAAA,KAAC,SAAI,WAAU,mDAAkD;AAAA;AAAA;AAAA,IAJ5D;AAAA,EAKP,CACD,GACH;AAEJ;AAEA,IAAM,yBAAuD,CAAC;AAAA,EAC5D;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,SACE,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,QACT;AAAA,QACA,SAAS,kBAAkB;AAAA,QAC3B;AAAA,MACF;AAAA,MAEA,0BAAAC,MAAC,SAAI,WAAU,wBACb;AAAA,wBAAAA,MAAC,SAAI,WAAU,uCACb;AAAA,0BAAAD,KAAC,QAAG,WAAU,gEAA+D,uBAAS;AAAA,UACtF,gBAAAA,KAAC,OAAE,WAAU,0BAAyB,8CAAgC;AAAA,WACxE;AAAA,QACA,gBAAAA,KAAC,SAAI,WAAU,oCACZ,wBACC,gBAAAA,KAAC,gBAAa,IACZ,qBAAqB,SACvB,gBAAAA,KAAC,QAAG,WAAU,aACX,+BAAqB,IAAI,CAAC,aACzB,gBAAAC;AAAA,UAAC;AAAA;AAAA,YAEC,WAAU;AAAA,YAEV;AAAA,8BAAAA,MAAC,SACC;AAAA,gCAAAD,KAAC,OAAE,WAAU,kCAAkC,mBAAS,MAAK;AAAA,gBAC5D,SAAS,aAAa,gBAAAA,KAAC,OAAE,WAAU,0BAA0B,mBAAS,WAAU;AAAA,iBACnF;AAAA,cACA,gBAAAA,KAAC,UAAK,WAAU,oHACb,mBAAS,OACZ;AAAA;AAAA;AAAA,UATK,SAAS;AAAA,QAUhB,CACD,GACH,IAEA,gBAAAA,KAAC,SAAI,WAAU,2GAA0G,kCAEzH,GAEJ;AAAA,SACF;AAAA;AAAA,EACF;AAEJ;AAEO,IAAM,gBAAgBE,MAAK,sBAAsB;AAExD,cAAc,cAAc;;;AJ0atB,gBAAAC,MAeA,QAAAC,aAfA;AAjfC,IAAM,kBAAkB;AACxB,IAAM,mBAAmB;AA4GhC,IAAM,8BAA8B,oBAAI,IAAI;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAED,IAAM,yBAAyB,oBAAI,IAAI,CAAC,WAAW,CAAC;AAEpD,IAAM,UAAgD;AAAA,EACpD,EAAE,IAAI,OAAO,OAAO,MAAM;AAAA,EAC1B,EAAE,IAAI,QAAQ,OAAO,OAAO;AAAA,EAC5B,EAAE,IAAI,SAAS,OAAO,QAAQ;AAAA,EAC9B,EAAE,IAAI,YAAY,OAAO,WAAW;AACtC;AAEO,SAAS,WAAW,WAAiC;AAC1D,MAAI,CAAC,WAAW;AACd,WAAO,oBAAI,KAAK;AAAA,EAClB;AAEA,QAAM,aAAa,UAAU,QAAQ,uBAAuB,OAAO;AACnE,SAAO,IAAI,KAAK,UAAU;AAC5B;AAEO,SAAS,gBAAgB,MAAoB;AAClD,SAAO,IAAI,KAAK,eAAe,QAAW;AAAA,IACxC,MAAM;AAAA,IACN,QAAQ;AAAA,EACV,CAAC,EAAE,OAAO,IAAI;AAChB;AAEO,SAAS,eAAe,IAAoB;AACjD,QAAM,eAAe,KAAK,IAAI,GAAG,KAAK,MAAM,KAAK,GAAI,CAAC;AACtD,QAAM,QAAQ,KAAK,MAAM,eAAe,IAAI;AAC5C,QAAM,UAAU,KAAK,MAAO,eAAe,OAAQ,EAAE;AACrD,QAAM,UAAU,eAAe;AAE/B,QAAM,QAAkB,CAAC;AACzB,MAAI,QAAQ,GAAG;AACb,UAAM,KAAK,GAAG,KAAK,GAAG;AAAA,EACxB;AACA,QAAM,KAAK,GAAG,OAAO,GAAG;AACxB,QAAM,KAAK,GAAG,OAAO,GAAG;AACxB,SAAO,MAAM,KAAK,GAAG;AACvB;AAEO,SAAS,aAAa,UAAiC;AAC5D,MAAI,SAAS,IAAI;AACf,WAAO,SAAS;AAAA,EAClB;AACA,QAAM,OAAO,SAAS,QAAQ;AAC9B,QAAM,QAAQ,SAAS,aAAa;AACpC,SAAO,GAAG,IAAI,IAAI,KAAK;AACzB;AAEO,SAAS,SAAS,MAAyB;AAChD,QAAM,aAAa,KAAK,aAAa,CAAC,GACnC,IAAI,CAAC,aAAa,GAAG,aAAa,QAAQ,CAAC,IAAI,SAAS,YAAY,CAAC,EAAE,EACvE,KAAK,EACL,KAAK,GAAG;AAEX,SAAO,GAAG,KAAK,UAAU,IAAI,SAAS;AACxC;AAEA,SAAS,YAAY,OAA4B;AAC/C,QAAM,oBAAoB,MAAM,UAAU;AAC1C,QAAM,gBAAgB,MAAM,UAAU;AAEtC,MAAI,iBAAiB,uBAAuB,IAAI,aAAa,GAAG;AAC9D,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,mBAAmB;AACtB,WAAO;AAAA,EACT;AAEA,SAAO,CAAC,4BAA4B,IAAI,iBAAiB;AAC3D;AAEA,SAAS,cAAc,OAAmB,QAA8B;AACtE,UAAQ,QAAQ;AAAA,IACd,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO,YAAY,KAAK;AAAA,IAC1B,KAAK;AACH,aAAO,MAAM,UAAU,sBAAsB;AAAA,IAC/C,KAAK;AACH,cACG,MAAM,UAAU,uBAAuB,MAAM,UAAU,eAAe,cACvE,MAAM,UAAU,kBAAkB,iBAClC,MAAM,UAAU,kBAAkB;AAAA,IAEtC;AACE,aAAO;AAAA,EACX;AACF;AAEA,SAAS,kBAAkB,OAAoC;AAC7D,QAAM,MAAM,oBAAI,IAA0B;AAE1C,QAAM,QAAQ,CAAC,SAAS;AACtB,UAAM,MAAM,SAAS,IAAI;AACzB,UAAM,eAAe,KAAK,YAAY;AACtC,UAAM,YAAY,KAAK,aAAa,CAAC;AAErC,UAAM,WAAW,IAAI,IAAI,GAAG;AAC5B,QAAI,UAAU;AACZ,eAAS,iBAAiB;AAE1B,YAAM,cAAc,IAAI,IAAI,SAAS,UAAU,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAU,CAAC;AAC9E,gBAAU,QAAQ,CAAC,aAAa;AAC9B,cAAM,cAAc,aAAa,QAAQ;AACzC,cAAM,oBAAoB,SAAS,YAAY,KAAK;AACpD,cAAM,UAAU,YAAY,IAAI,WAAW;AAC3C,YAAI,SAAS;AACX,kBAAQ,YAAY;AAAA,QACtB,OAAO;AACL,sBAAY,IAAI,aAAa;AAAA,YAC3B,KAAK;AAAA,YACL,MAAM,SAAS;AAAA,YACf,WAAW,SAAS;AAAA,YACpB,UAAU;AAAA,UACZ,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AACD,eAAS,YAAY,MAAM,KAAK,YAAY,OAAO,CAAC,EAAE;AAAA,QAAK,CAAC,GAAG,MAC7D,EAAE,KAAK,cAAc,EAAE,MAAM,QAAW,EAAE,aAAa,OAAO,CAAC;AAAA,MACjE;AAEA,eAAS,gBAAgB,sBAAsB,SAAS,eAAe,KAAK,iBAAiB;AAAA,IAC/F,OAAO;AACL,YAAM,oBAA+C,CAAC;AACtD,YAAM,cAAc,oBAAI,IAAqC;AAC7D,gBAAU,QAAQ,CAAC,aAAa;AAC9B,cAAM,cAAc,aAAa,QAAQ;AACzC,cAAM,oBAAoB,SAAS,YAAY,KAAK;AACpD,oBAAY,IAAI,aAAa;AAAA,UAC3B,KAAK;AAAA,UACL,MAAM,SAAS;AAAA,UACf,WAAW,SAAS;AAAA,UACpB,UAAU;AAAA,QACZ,CAAC;AAAA,MACH,CAAC;AACD,kBAAY,QAAQ,CAAC,UAAU,kBAAkB,KAAK,KAAK,CAAC;AAC5D,wBAAkB,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,cAAc,EAAE,MAAM,QAAW,EAAE,aAAa,OAAO,CAAC,CAAC;AAEjG,UAAI,IAAI,KAAK;AAAA,QACX;AAAA,QACA,UAAU,KAAK;AAAA,QACf,YAAY,KAAK;AAAA,QACjB,eAAe;AAAA,QACf,WAAW;AAAA,QACX,eAAe,sBAAsB,QAAW,KAAK,iBAAiB;AAAA,MACxE,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,SAAO,MAAM,KAAK,IAAI,OAAO,CAAC;AAChC;AAEA,SAAS,sBACP,gBACA,YACQ;AACR,QAAM,mBAAmB,cAAc;AAEvC,MAAI,CAAC,kBAAkB,mBAAmB,kBAAkB;AAC1D,WAAO;AAAA,EACT;AAEA,MAAI,eAAe,SAAS,OAAO,GAAG;AACpC,WAAO;AAAA,EACT;AAEA,MAAI,mBAAmB,kBAAkB;AACvC,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAEA,SAAS,mBAAmB,QAA8C;AACxE,QAAM,SAAS,oBAAI,IAAkC;AAErD,SAAO,QAAQ,CAAC,UAAU;AACxB,UAAM,MAAM,QAAQ,CAAC,SAAS;AAC5B,OAAC,KAAK,aAAa,CAAC,GAAG,QAAQ,CAAC,aAAa;AAC3C,cAAM,MAAM,aAAa,QAAQ;AACjC,cAAM,YAAY,SAAS,YAAY,MAAM,KAAK,YAAY;AAC9D,cAAM,WAAW,OAAO,IAAI,GAAG;AAC/B,YAAI,UAAU;AACZ,mBAAS,SAAS;AAAA,QACpB,OAAO;AACL,iBAAO,IAAI,KAAK;AAAA,YACd;AAAA,YACA,MAAM,SAAS;AAAA,YACf,WAAW,SAAS;AAAA,YACpB,OAAO;AAAA,UACT,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AAED,SAAO,MAAM,KAAK,OAAO,OAAO,CAAC,EAC9B,KAAK,CAAC,GAAG,MAAM;AACd,QAAI,EAAE,UAAU,EAAE,OAAO;AACvB,aAAO,EAAE,QAAQ,EAAE;AAAA,IACrB;AACA,WAAO,EAAE,KAAK,cAAc,EAAE,MAAM,QAAW,EAAE,aAAa,OAAO,CAAC;AAAA,EACxE,CAAC,EACA,MAAM,GAAG,EAAE;AAChB;AAEO,SAAS,cAAc,QAA0D;AACtF,SAAO,OAAO,OAAO,OAAO,EAAE,KAAK,GAAG;AACxC;AAEO,SAAS,kBAAkB,OAAoB,KAAmB;AACvE,MAAI,CAAC,OAAO;AACV,WAAO;AAAA,EACT;AAEA,QAAM,OAAO,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAE3C,MAAI,OAAO,GAAG;AACZ,WAAO;AAAA,EACT;AAEA,MAAI,QAAQ,IAAI,KAAK,KAAM;AACzB,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAEO,SAAS,qBAAqB,QAAwD;AAC3F,UAAQ,QAAQ;AAAA,IACd,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAEO,IAAM,mBAA6B,MAAM;AAC9C,QAAM,CAAC,QAAQ,SAAS,IAAI,SAAuB,CAAC,CAAC;AACrD,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,KAAK;AAClD,QAAM,CAAC,qBAAqB,sBAAsB,IAAI,SAAS,KAAK;AACpE,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAwB,IAAI;AACtD,QAAM,CAAC,aAAa,cAAc,IAAI,SAAsB,IAAI;AAChE,QAAM,CAAC,QAAQ,SAAS,IAAI,SAAsB,MAAM;AACxD,QAAM,CAAC,KAAK,MAAM,IAAI,SAAe,MAAM,oBAAI,KAAK,CAAC;AACrD,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,KAAK;AAElD,YAAU,MAAM;AACd,UAAM,QAAQ,YAAY,MAAM;AAC9B,aAAO,oBAAI,KAAK,CAAC;AAAA,IACnB,GAAG,GAAI;AACP,WAAO,MAAM,cAAc,KAAK;AAAA,EAClC,GAAG,CAAC,CAAC;AAEL,QAAM,cAAc,YAAY,YAAY;AAC1C,kBAAc,IAAI;AAClB,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,iBAAiB;AAAA,QAC5C,OAAO;AAAA,MACT,CAAC;AAED,UAAI,CAAC,SAAS,IAAI;AAChB,cAAM,IAAI,MAAM,mBAAmB,SAAS,MAAM,EAAE;AAAA,MACtD;AAEA,YAAM,UAAW,MAAM,SAAS,KAAK;AACrC,gBAAU,MAAM,QAAQ,QAAQ,MAAM,IAAI,QAAQ,SAAS,CAAC,CAAC;AAC7D,qBAAe,oBAAI,KAAK,CAAC;AACzB,eAAS,IAAI;AAAA,IACf,SAAS,KAAK;AACZ,YAAM,UAAU,eAAe,QAAQ,IAAI,UAAU;AACrD,eAAS,OAAO;AAAA,IAClB,UAAE;AACA,oBAAc,KAAK;AACnB,6BAAuB,IAAI;AAAA,IAC7B;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,YAAU,MAAM;AACd,gBAAY;AACZ,UAAM,WAAW,YAAY,aAAa,gBAAgB;AAC1D,WAAO,MAAM,cAAc,QAAQ;AAAA,EACrC,GAAG,CAAC,WAAW,CAAC;AAEhB,QAAM,eAAe,QAAQ,MAAM;AACjC,WAAO,CAAC,GAAG,MAAM,EAAE,KAAK,CAAC,GAAG,MAAM;AAChC,YAAM,OAAO,EAAE,UAAU,UAAU,WAAW,EAAE,UAAU,OAAO,IAAI;AACrE,YAAM,OAAO,EAAE,UAAU,UAAU,WAAW,EAAE,UAAU,OAAO,IAAI;AAErE,UAAI,QAAQ,MAAM;AAChB,cAAM,OAAO,KAAK,QAAQ,IAAI,KAAK,QAAQ;AAC3C,YAAI,SAAS,GAAG;AACd,iBAAO;AAAA,QACT;AAAA,MACF,WAAW,QAAQ,CAAC,MAAM;AACxB,eAAO;AAAA,MACT,WAAW,CAAC,QAAQ,MAAM;AACxB,eAAO;AAAA,MACT;AAEA,YAAM,UAAU,WAAW,EAAE,UAAU,SAAS,EAAE,QAAQ;AAC1D,YAAM,UAAU,WAAW,EAAE,UAAU,SAAS,EAAE,QAAQ;AAC1D,UAAI,YAAY,SAAS;AACvB,eAAO,UAAU;AAAA,MACnB;AAEA,YAAM,eAAe,OAAO,SAAS,EAAE,UAAU,aAAa,EAAE;AAChE,YAAM,eAAe,OAAO,SAAS,EAAE,UAAU,aAAa,EAAE;AAEhE,UAAI,CAAC,OAAO,MAAM,YAAY,KAAK,CAAC,OAAO,MAAM,YAAY,GAAG;AAC9D,eAAO,eAAe;AAAA,MACxB;AAEA,aAAO,EAAE,UAAU,YAAY,cAAc,EAAE,UAAU,WAAW;AAAA,IACtE,CAAC;AAAA,EACH,GAAG,CAAC,MAAM,CAAC;AAEX,QAAM,gBAAgB;AAAA,IACpB,MAAM,aAAa,OAAO,CAAC,UAAU,cAAc,OAAO,MAAM,CAAC;AAAA,IACjE,CAAC,cAAc,MAAM;AAAA,EACvB;AAEA,QAAM,iBAAiB;AAAA,IACrB,MAAM,aAAa,OAAO,CAAC,UAAU,YAAY,KAAK,CAAC,EAAE;AAAA,IACzD,CAAC,YAAY;AAAA,EACf;AAEA,QAAM,uBAAuB;AAAA,IAC3B,MAAM,mBAAmB,aAAa;AAAA,IACtC,CAAC,aAAa;AAAA,EAChB;AAEA,QAAM,iBAAiB;AAAA,IACrB,MACE,cAAc,IAAI,CAAC,WAAW;AAAA,MAC5B,KAAK;AAAA,MACL,UAAU,WAAW,MAAM,UAAU,SAAS;AAAA,MAC9C,OAAO,MAAM,UAAU,UAAU,WAAW,MAAM,UAAU,OAAO,IAAI;AAAA,MACvE,eAAe,kBAAkB,MAAM,KAAK;AAAA,IAC9C,EAAE;AAAA,IACJ,CAAC,aAAa;AAAA,EAChB;AAEA,QAAM,cAAc,CAAC;AACrB,QAAM,iBAAiB,uBAAuB,CAAC,cAAc,UAAU,CAAC,cAAc,CAAC;AAEvF,QAAM,mBAAmB,YAAY,MAAM;AACzC,kBAAc,CAAC,SAAS,CAAC,IAAI;AAAA,EAC/B,GAAG,CAAC,CAAC;AAEL,QAAM,mBAAmB,QAAQ,MAAM,gBAAgB,GAAG,GAAG,CAAC,GAAG,CAAC;AAClE,QAAM,mBAAmB;AAAA,IACvB,MAAO,cAAc,gBAAgB,WAAW,IAAI;AAAA,IACpD,CAAC,WAAW;AAAA,EACd;AAEA,QAAM,sBAAsB,QAAQ,MAAM;AACxC,QAAI,YAAY;AACd,aAAO;AAAA,IACT;AACA,QAAI,aAAa;AACf,aAAO,gBAAgB,gBAAgB,WAAW,CAAC;AAAA,IACrD;AACA,WAAO;AAAA,EACT,GAAG,CAAC,YAAY,WAAW,CAAC;AAE5B,SACE,gBAAAA,MAAC,SAAI,WAAU,4CACb;AAAA,oBAAAD;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,cAAc;AAAA,QACd;AAAA;AAAA,IACF;AAAA,IAEA,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,QAAQ;AAAA,QACR;AAAA,QACA;AAAA;AAAA,IACF;AAAA,IAEA,gBAAAC;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,QAEA;AAAA,0BAAAD;AAAA,YAAC;AAAA;AAAA,cACC,cAAc;AAAA,cACd,SAAS;AAAA,cACT,gBAAgB;AAAA,cAChB,eAAe;AAAA;AAAA,UACjB;AAAA,UAEA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC;AAAA,cACA;AAAA,cACA;AAAA,cACA,SAAS;AAAA,cACT;AAAA,cACA;AAAA;AAAA,UACF;AAAA;AAAA;AAAA,IACF;AAAA,KACF;AAEJ;AAEO,SAAS,mBAAmB,QAA8B;AAC/D,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,EACT;AACA,MAAI,QAAQ,KAAK,MAAM,GAAG;AACxB,WAAO;AAAA,EACT;AACA,SAAO,OACJ,MAAM,GAAG,EACT,IAAI,CAAC,YAAY,QAAQ,OAAO,CAAC,IAAI,QAAQ,MAAM,CAAC,EAAE,YAAY,CAAC,EACnE,KAAK,GAAG;AACb;AAEA,IAAO,2BAAQ;;;ADpiBT,gBAAAE,YAAA;AANN,IAAM,YAAY,SAAS,eAAe,KAAK;AAE/C,IAAI,WAAW;AACb,QAAM,OAAO,WAAW,SAAS;AACjC,OAAK;AAAA,IACH,gBAAAA,KAACC,OAAM,YAAN,EACC,0BAAAD,KAAC,4BAAiB,GACpB;AAAA,EACF;AACF;",
  "names": ["React", "memo", "jsx", "jsxs", "memo", "memo", "jsx", "jsxs", "memo", "jsx", "jsxs", "memo", "jsx", "jsxs", "jsx", "React"]
}
